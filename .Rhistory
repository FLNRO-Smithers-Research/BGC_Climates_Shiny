num <- i+k
if(num <= nrow(body)){
paste(c(
paste0(sprintf("[%d][lat]", i - 1), "=", body$lat[num]),
paste0(sprintf("[%d][lon]", i - 1), "=", body$lon[num]),
paste0(sprintf("[%d][el]", i - 1), "=", body$el[num]),
paste0(sprintf("[%d][prd]", i - 1), "=", body$prd[num]),
paste0(sprintf("[%d][varYSM]", i - 1), "=", body$varYSM[num])
), collapse = "&")
}
})
out[1]
out <- paste(out, collapse = "&")
result <- POST(url = "http://apibc.climatewna.com/api/clmApi", ##post to API
body = out,
add_headers(`Content-Type`="application/x-www-form-urlencoded"), timeout(400000))
output <- fromJSON(rawToChar(result$content))
output
tic()
results <- foreach(k = start, .combine = rbind) %do% {
out <- sapply(1:1000, function(i) {
num <- i+k
if(num <= nrow(body)){
paste(c(
paste0(sprintf("[%d][lat]", i - 1), "=", body$lat[num]),
paste0(sprintf("[%d][lon]", i - 1), "=", body$lon[num]),
paste0(sprintf("[%d][el]", i - 1), "=", body$el[num]),
paste0(sprintf("[%d][prd]", i - 1), "=", body$prd[num]),
paste0(sprintf("[%d][varYSM]", i - 1), "=", body$varYSM[num])
), collapse = "&")
}
})
out <- paste(out, collapse = "&")
result <- POST(url = "http://apibc.climatewna.com/api/clmApi", ##post to API
body = out,
add_headers(`Content-Type`="application/x-www-form-urlencoded"), timeout(400000))
output <- fromJSON(rawToChar(result$content))
output
}
toc()
View(results)
1643/60
require(doParallel)
set.seed(123321)
coreNum <- as.numeric(detectCores()-2)
coreNo <- makeCluster(coreNum)
registerDoParallel(coreNo, cores = coreNum)
tic()
results <- foreach(k = start, .combine = rbind, .packages = c("httr","jsonlite")) %dopar% {
out <- sapply(1:1000, function(i) {
num <- i+k
if(num <= nrow(body)){
paste(c(
paste0(sprintf("[%d][lat]", i - 1), "=", body$lat[num]),
paste0(sprintf("[%d][lon]", i - 1), "=", body$lon[num]),
paste0(sprintf("[%d][el]", i - 1), "=", body$el[num]),
paste0(sprintf("[%d][prd]", i - 1), "=", body$prd[num]),
paste0(sprintf("[%d][varYSM]", i - 1), "=", body$varYSM[num])
), collapse = "&")
}
})
out <- paste(out, collapse = "&")
result <- POST(url = "http://apibc.climatewna.com/api/clmApi", ##post to API
body = out,
add_headers(`Content-Type`="application/x-www-form-urlencoded"), timeout(400000))
output <- fromJSON(rawToChar(result$content))
output
}
toc()
644/60
body <- fread(file.choose(), stringsAsFactors = FALSE, data.table = FALSE)
p <- rep(c(T,F),2^nvars/2)
nvars <- 4
p <- rep(c(T,F),2^nvars/2)
p
q <- rep(rep(c(T,F), each = 2), 2^nvars/4)
q
r <- rep(rep(c(T,F), each = 4), 2^nvars/8)
r
s <- rep(rep(c(T,F), each = 8), 2^nvars/16)
tt <- cbind(p,q,r,s)
View(tt)
tt <- as.data.frame(tt)
tt$p1 <- !tt$p | (!tt$q | tt$r)
View(tt)
View(tt)
tt[,c("p","r")]
tt$p2 <- apply(tt[,c("p","r")],1,FUN =
function(x){if((x[1] == T & x[2] == !T)|x[1] == F){return(TRUE)}else{return(F)}})
tt$p3 <- tt$q|tt$s
tt$c <- apply(tt[,c("p","s")],1,FUN =
function(x){if((x[1] == T & x[2] == T)|x[1] == F){return(TRUE)}else{return(F)}})
View(tt)
nvars <- 4
p <- rep(c(T,F),2^nvars/2) ###create values for all variables
q <- rep(rep(c(T,F), each = 2), 2^nvars/4)
r <- rep(rep(c(T,F), each = 4), 2^nvars/8)
s <- rep(rep(c(T,F), each = 8), 2^nvars/16)
tt <- cbind(p,q,r,s)
tt <- as.data.frame(tt)
tt$p1 <- !tt$p | (!tt$q | tt$r) ###premise 1
tt$p2 <- apply(tt[,c("p","r")],1,FUN = ##Premise 2
function(x){if((x[1] == T & x[2] == !T)|x[1] == F){return(TRUE)}else{return(F)}})
tt$p3 <- tt$q|tt$s ##Premise 3
tt$c <- apply(tt[,c("p","s")],1,FUN = ###conclusion
function(x){if((x[1] == T & x[2] == T)|x[1] == F){return(TRUE)}else{return(F)}})
View(tt)
shiny::runApp('C:/Users/Kiri Daust/Desktop/BGC_Climates_Shiny')
shiny::runApp('C:/Users/Kiri Daust/Desktop/BGC_Climates_Shiny')
require(shiny)
require(reshape)
require(shinyWidgets)
require(ggplot2)
require(climatol)
require(vegan)
require(shinythemes)
require(openxlsx)
require(gganimate)
require(ggConvexHull)
require(devtools)
require(animation)
require(magick)
library(tcltk)
setwd(tk_choose.dir())
climSummary <- read.csv("ClimateSummaryCurrent_v11_5.6.csv", stringsAsFactors = FALSE)
futureSummary <- read.csv("ClimateSummary_Future_v11_5.6.csv", stringsAsFactors = FALSE)
futureSummary$period <- as.character(futureSummary$period)
####Set up choices
BGC.choose <- as.character(unique(climSummary$BGC))
period.choose <- as.character(unique(climSummary$period))
period.ts <- c(period.choose[1:4], "2025","2055","2085")
period.other <- c(period.choose[4:length(period.choose)])
stat.choose <- as.character(unique(climSummary$Var))
var.choose <- as.character(colnames(climSummary)[-c(1:3)])
var.choose <- var.choose[order(var.choose)]
monthly <- var.choose[grep("01|02|03|04|05|06|07|08|09|10|11|12", var.choose)]
seasonal <- var.choose[grep("sp|sm|at|wt", var.choose)]
seasonalShort <- seasonal[grep("PPT|RAD|Tave|Tmin|Tmax", seasonal)]
annual <- var.choose[!var.choose %in% c(monthly,seasonal)]
zone.choose <- c("BAFA", "BG", "BWBS", "CDF",  "CMA",  "CWH",  "ESSF", "ICH",  "IDF",  "IMA",  "MH",   "MS",   "PP",   "SBPS" ,"SBS",
"SWB")
annualDirect <- c("MAT","MWMT","MCMT","TD","MAP","MSP","AHM","SHM")
futScn <- c("rcp45","rcp85")
for(i in 1:length(zone.choose)){
name <- paste(zone.choose[i],".choose", sep = "")
temp <- BGC.choose[grep(zone.choose[i],BGC.choose)]
assign(name,temp)
}
BGC.list <- list()
###Create list with choices for selection
for (i in 1:length(zone.choose)){
name <- zone.choose[i]
name2 <- paste(zone.choose[i],".choose", sep = "")
temp <- get(name2)
BGC.list[[name]] <- temp
}
###read in model data
#modelDat <- read.csv("WeatherStationLocations_updated_Normal_1961_1990MSY.csv",stringsAsFactors = FALSE)
modelDat <- read.csv("StPoints_ModelDat.csv")
stationDat <- read.csv("StationSummary.csv")
stationDat <- merge(modelDat[,1:5], stationDat, by = "STATION", all = FALSE)
stationDat <- unique(stationDat)
stationDat$BGC <- as.character(stationDat$BGC)
stationDat$STATION <- as.character(stationDat$STATION)
stn.BGC <- unique(stationDat$BGC)
stn.BGC <- sort(stn.BGC)
stn.var <- colnames(stationDat)[-c(1:6)]
stn.var <- sort(stn.var)
stn.list <- list()
for(i in 1:length(stn.BGC)){
temp <- stationDat$STATION[stationDat$BGC == stn.BGC[i]]
name <- paste("stn.",stn.BGC[i],sep = "")
stn.list[[name]] <- temp
}
View(stn.list)
stn.list[["stn.BGxh1"]]
stn <- c("112097",  "112099",  "1121459", "112152",  "112300",  "112302" , "1124110", "1124112" ,"1125760", "1125766", "1125850", "1125852")
vars <- c("MAP","Tave_wt","TD")
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
View(stationSub)
stationSub <- stationSub[rowSums(stationSub[,-c(1:6)], na.rm = TRUE) != 0,]
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
stationSub <- stationSub[rowSums(stationSub[,-c(1:6)], na.rm = TRUE) != 0,]
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
stationSub <- stationSub[rowSums(stationSub[,-c(1:2)], na.rm = TRUE) != 0,]
View(stationSub)
modelSub <- modelDat[modelDat$STATION %in% stn,c("STATION", vars)]
modelSub <- unique(modelSub)
stnBoth <- merge(stationSub, modelSub, by = "STATION", suffixes = c("_Station","_Model"), all.x = TRUE)
View(stnBoth)
colnames(stnBoth)[1] <- "St_ID"
View(stnBoth)
stnBoth <- melt(stnBoth, id.vars = c("St_ID","Name"))
View(stnBoth)
?ifelse
stnBoth$Type <- ifelse(grep("Station",stnBoth$variable), "Station","Model")
View(stnBoth)
stnBoth$Type <- ifelse(grepl("Station",stnBoth$variable), "Station","Model")
stnBoth$variable <- gsub("Station|Model","",stnBoth$variable)
?diff
diff(c(3,5))
diff(c(5,3))
stnBoth <- dcast(stnBoth, St_ID + Name + variable ~ value, fun.aggregate = diff)
library(reshape2)
stnBoth <- dcast(stnBoth, St_ID + Name + variable ~ value, fun.aggregate = diff)
View(stnBoth)
stnBoth <- stnBoth[!is.na(stnBoth$value),]
stnBoth <- dcast(stnBoth, St_ID + Name + variable ~ value, fun.aggregate = diff)
View(stnBoth)
stnBoth <- dcast(stnBoth, St_ID + Name + variable ~ value, fun.aggregate = mean)
View(stnBoth)
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
stationSub <- stationSub[rowSums(stationSub[,-c(1:2)], na.rm = TRUE) != 0,]
modelSub <- modelDat[modelDat$STATION %in% stn,c("STATION", vars)]
modelSub <- unique(modelSub)
stnBoth <- merge(stationSub, modelSub, by = "STATION", suffixes = c("_Station","_Model"), all.x = TRUE)
colnames(stnBoth)[1] <- "St_ID"
stnBoth <- melt(stnBoth, id.vars = c("St_ID","Name"))
stnBoth$Type <- ifelse(grepl("Station",stnBoth$variable), "Station","Model")
stnBoth$variable <- gsub("_Station|_Model","",stnBoth$variable)
stnBoth <- stnBoth[!is.na(stnBoth$value),]
View(stnBoth)
stnBoth <- dcast(stnBoth, St_ID + Name ~ variable, value.var = "value", fun.aggregate = diff)
temp <- dcast(stnBoth, St_ID + Name ~ variable, value.var = "value", fun.aggregate = mean)
View(temp)
temp <- dcast(stnBoth, St_ID + Name ~ variable, value.var = "value", fun.aggregate = diff)
diffFun <- function(x){
return (abs(x[1]-x[2]))
}
temp <- dcast(stnBoth, St_ID + Name ~ variable, value.var = "value", fun.aggregate = diffFun)
View(temp)
View(stnBoth)
plot(density(temp$TD))
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
stationSub <- stationSub[rowSums(stationSub[,-c(1:2)], na.rm = TRUE) != 0,]
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
modelSub <- modelDat[modelDat$STATION %in% stn,c("STATION", vars)]
modelSub <- unique(modelSub)
stnBoth <- merge(stationSub, modelSub, by = "STATION", suffixes = c("_Station","_Model"), all.x = TRUE)
colnames(stnBoth)[1] <- "St_ID"
stnBoth <- melt(stnBoth, id.vars = c("St_ID","Name"))
stnBoth$Type <- ifelse(grepl("Station",stnBoth$variable), "Station","Model")
stnBoth$variable <- gsub("_Station|_Model","",stnBoth$variable)
temp <- dcast(stnBoth, St_ID + Name ~ variable, value.var = "value", fun.aggregate = diffFun)
View(temp)
plot(density(temp$TD),density(temp$Tave_wt))
lines(density(temp$Tave_wt))
lines(density(temp$Tave_wt[!is.na(temp$Tave_wt)]))
plot(density(temp$TD),density(temp$Tave_wt[!is.na(temp$Tave_wt)]))
plot(density(temp$TD[!is.na(temp$TD)]),density(temp$Tave_wt[!is.na(temp$Tave_wt)]))
plot(0,0, xlim = c(-2,2), ylim = c(0,0.8))
lines(density(temp$TD[!is.na(temp$TD)]))
lines(density(temp$Tave_wt[!is.na(temp$Tave_wt)]))
plot(0,0, xlim = c(-2,2), ylim = c(0,1.5))
lines(density(temp$TD[!is.na(temp$TD)]))
lines(density(temp$Tave_wt[!is.na(temp$Tave_wt)]))
View(temp)
diffFun <- function(x){
return (x[1]-x[2])
}
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
stationSub <- stationSub[rowSums(stationSub[,-c(1:2)], na.rm = TRUE) != 0,]
modelSub <- modelDat[modelDat$STATION %in% stn,c("STATION", vars)]
modelSub <- unique(modelSub)
stnBoth <- merge(stationSub, modelSub, by = "STATION", suffixes = c("_Station","_Model"), all.x = TRUE)
colnames(stnBoth)[1] <- "St_ID"
stnBoth <- melt(stnBoth, id.vars = c("St_ID","Name"))
stnBoth$Type <- ifelse(grepl("Station",stnBoth$variable), "Station","Model")
stnBoth$variable <- gsub("_Station|_Model","",stnBoth$variable)
stnBoth <- stnBoth[!is.na(stnBoth$value),]
diffFun <- function(x){
return (x[1]-x[2])
}
temp <- dcast(stnBoth, St_ID + Name ~ variable, value.var = "value", fun.aggregate = diffFun)
plot(0,0, xlim = c(-2,2), ylim = c(0,1.5))
lines(density(temp$TD[!is.na(temp$TD)]))
lines(density(temp$Tave_wt[!is.na(temp$Tave_wt)]))
View(temp)
i <- "Tave_wt"
dat <- temp[,i]
dat <- dat[!is.na(dat)]
plot(0,0, xlim = c(-2,2), ylim = c(0,1.5))
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
lines(density(dat))
}
View(temp)
dat <- dat/sum(dat)
dat
plot(0,0, xlim = c(-2,2), ylim = c(0,1.5))
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
dat <- dat/sum(dat)
lines(density(dat))
}
plot(0,0, xlim = c(-0.5,0.5), ylim = c(0,2))
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
dat <- dat/sum(dat)
lines(density(dat))
}
plot(0,0, xlim = c(-0.5,0.5), ylim = c(0,5))
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
dat <- dat/sum(dat)
lines(density(dat))
}
plot(0,0, xlim = c(min(temp[,-(1:2)]),max(temp[,-(1:2)])), ylim = c(0,5))
min(temp[,-(1:2)])
plot(0,0, xlim = c(min(temp[,-(1:2)], na.rm = TRUE),max(temp[,-(1:2)], na.rm = TRUE)), ylim = c(0,5))
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat))
}
plot(0,0, xlim = c(-2,2), ylim = c(0,5))
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat))
}
plot(0,0, xlim = c(-2,2), ylim = c(0,2))
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat))
}
plot(0,0, xlim = c(min(-2, min(temp[,-(1:2)], na.rm = TRUE)), min(3,max(temp[,-(1:2)], na.rm = TRUE))), ylim = c(0,2))
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat))
}
plot(0,0, xlim = c(max(-2, min(temp[,-(1:2)], na.rm = TRUE)), min(3,max(temp[,-(1:2)], na.rm = TRUE))), ylim = c(0,2))
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat))
}
cols <- rainbow(length(vars))
cols <- rainbow(length(vars))
i <- 1
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat), col = cols[i])
i <- i+1
}
plot(0,0, xlim = c(max(-2, min(temp[,-(1:2)], na.rm = TRUE)), min(3,max(temp[,-(1:2)], na.rm = TRUE))), ylim = c(0,2))
cols <- rainbow(length(vars))
i <- 1
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat), col = cols[i])
i <- i+1
}
j <- 1
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat), col = cols[i])
j <- j+1
}
cols <- rainbow(length(vars))
j <- 1
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat), col = cols[j])
j <- j+1
}
legend(topleft, legend = vars, fill = cols)
legend("topleft", legend = vars, fill = cols)
runApp()
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
stationSub <- stationSub[rowSums(stationSub[,-c(1:2)], na.rm = TRUE) != 0,]
modelSub <- modelDat[modelDat$STATION %in% stn,c("STATION", vars)]
View(stn.list)
stn.list[["stn.SBSdk"]]
stn <- stn.list[["stn.SBSdk"]]
vars <- c("Tmin_sm","Tave_wt","TD")
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
stationSub <- stationSub[rowSums(stationSub[,-c(1:2)], na.rm = TRUE) != 0,]
modelSub <- modelDat[modelDat$STATION %in% stn,c("STATION", vars)]
modelSub <- unique(modelSub)
stnBoth <- merge(stationSub, modelSub, by = "STATION", suffixes = c("_Station","_Model"), all.x = TRUE)
colnames(stnBoth)[1] <- "St_ID"
stnBoth <- melt(stnBoth, id.vars = c("St_ID","Name"))
stnBoth$Type <- ifelse(grepl("Station",stnBoth$variable), "Station","Model")
stnBoth$variable <- gsub("_Station|_Model","",stnBoth$variable)
stnBoth <- stnBoth[!is.na(stnBoth$value),]
diffFun <- function(x){
return (x[1]-x[2])
}
temp <- dcast(stnBoth, St_ID + Name ~ variable, value.var = "value", fun.aggregate = diffFun)
plot(0,0, xlim = c(max(-2, min(temp[,-(1:2)], na.rm = TRUE)), min(3,max(temp[,-(1:2)], na.rm = TRUE))), ylim = c(0,2))
cols <- rainbow(length(vars))
j <- 1
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat), col = cols[j])
j <- j+1
}
legend("topleft", legend = vars, fill = cols)
stn <- stn.list[["stn.SBSmc2"]]
vars <- c("Tmin_sm","Tave_wt","TD")
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION","Name",vars)]
stationSub <- stationSub[rowSums(stationSub[,-c(1:2)], na.rm = TRUE) != 0,]
modelSub <- modelDat[modelDat$STATION %in% stn,c("STATION", vars)]
modelSub <- unique(modelSub)
stnBoth <- merge(stationSub, modelSub, by = "STATION", suffixes = c("_Station","_Model"), all.x = TRUE)
colnames(stnBoth)[1] <- "St_ID"
stnBoth <- melt(stnBoth, id.vars = c("St_ID","Name"))
stnBoth$Type <- ifelse(grepl("Station",stnBoth$variable), "Station","Model")
stnBoth$variable <- gsub("_Station|_Model","",stnBoth$variable)
stnBoth <- stnBoth[!is.na(stnBoth$value),]
diffFun <- function(x){
return (x[1]-x[2])
}
temp <- dcast(stnBoth, St_ID + Name ~ variable, value.var = "value", fun.aggregate = diffFun)
plot(0,0, xlim = c(max(-2, min(temp[,-(1:2)], na.rm = TRUE)), min(3,max(temp[,-(1:2)], na.rm = TRUE))), ylim = c(0,2))
cols <- rainbow(length(vars))
j <- 1
for(i in vars){
dat <- temp[,i]
dat <- dat[!is.na(dat)]
##dat <- dat/sum(dat)
lines(density(dat), col = cols[j])
j <- j+1
}
runApp()
runApp()
View(stationSub)
runApp()
View(modelSub)
View(stationSub)
legend("topleft", legend = vars, fill = cols)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
stn <- stn.list[["stn.SBSmc2"]]
vars <- c("Tmin_sm")
###########################################
modelSub <- modelDat[modelDat$STATION %in% stn,c("STATION", vars)]
colnames(modelSub) <- c("Station","Mean")
modelSub$Type <- "Model"
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION",vars)]
colnames(stationSub) <- c("Station","Mean")
stationSub$Type <- "Station"
dat <- rbind(modelSub,stationSub)
dat <- dat[order(dat$Station),]
View(dat)
dat2 <- dcast(dat, Station ~ Type)
dat2 <- dcast(dat, Station ~ Type, value.var = "Mean")
View(dat2)
modelSub <- unique(modelSub)
stationSub <- stationDat[stationDat$STATION %in% stn, c("STATION",vars)]
colnames(stationSub) <- c("Station","Mean")
stationSub$Type <- "Station"
dat <- rbind(modelSub,stationSub)
dat <- dat[order(dat$Station),]
dat2 <- dcast(dat, Station ~ Type, value.var = "Mean")
View(dat2)
dat2$Diff <- apply(dat2[,c("Model","Station")],1,FUN = function(x){(min(x)/max(x))*100})
str(dat2)
colnames(dat2)[1] <- "ID"
dat2$Diff <- apply(dat2[,c("Model","Station")],1,FUN = function(x){(min(x)/max(x))*100})
dat2$Diff <- apply(dat2[,c("Model","Station")],1,FUN = function(x){(1-(min(x)/max(x)))*100})
View(dat2)
View(dat2)
dat2$Diff[is.na(dat2$Diff)] <- 100
View(dat2)
maxDiff <- 30
dat <- dat[dat$Station %in% dat2$ID[dat2$Diff < maxDiff],]
View(dat)
View(temp)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
modelDat <- read.csv("StPoints_Model81-10.csv")
modelReg <- read.csv("StPoints_Model61-90.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
